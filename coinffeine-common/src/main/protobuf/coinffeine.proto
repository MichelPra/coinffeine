// Copyright (C) 2013 Bitwise
// All rights reserved

package coinffeine.protocol;

option java_package = "com.coinffeine.common.protocol.protobuf";
option java_outer_classname = "CoinffeineProtobuf";
option java_generic_services = true;

message BtcAmount {
    required int64 value = 1;
    required int32 scale = 2;
}

message FiatAmount {
    required int64 value = 1;
    required int32 scale = 2;
    required string currency = 3;
}

enum OrderType {
    BID = 0;
    ASK = 1;
}

message Order {
    required OrderType type = 1;
    required BtcAmount amount = 2;
    required FiatAmount price = 3;
}

message CancelOrder {
    required string currency = 1;
}

message QuoteRequest {
    required string currency = 1;
}

message Quote {
    required string currency = 1;
    optional FiatAmount highestBid = 2;
    optional FiatAmount lowestAsk = 3;
    optional FiatAmount lastPrice = 4;
}

message OrderMatch {
    required string exchangeId = 1;
    required BtcAmount amount = 2;
    required FiatAmount price = 3;
    required string buyer = 4;
    required string seller = 5;
}

message ExchangeAborted {
    required string exchangeId = 1;
    required string reason = 2;
}

message ExchangeRejection {
    required string exchangeId = 1;
    required string reason = 2;
}

message CommitmentNotification {
    required string exchangeId = 1;
    required bytes buyerTxId = 2;
    required bytes sellerTxId = 3;
}

message RefundTxSignatureRequest {
    required string exchangeId = 1;
    required bytes refundTx = 2;
}

message RefundTxSignatureResponse {
    required string exchangeId = 1;
    required bytes transactionSignature = 2;
}

message EnterExchange {
    required string exchangeId = 1;
    required bytes commitmentTransaction = 2;
}

message StepSignature {
    required string exchangeId = 1;
    required bytes transactionSignature = 2;
}

message PaymentProof {
    required string exchangeId = 1;
    required string paymentId = 2;
}

message Void {}

message CoinffeineMessage {
    optional ExchangeAborted exchangeAborted = 1;
    optional EnterExchange enterExchange = 2;
    optional CommitmentNotification commitmentNotification = 3;
    optional OrderMatch orderMatch = 4;
    optional Order order = 5;
    optional CancelOrder cancelOrder = 6;
    optional QuoteRequest quoteRequest = 7;
    optional Quote quote = 8;
    optional ExchangeRejection exchangeRejection = 9;
    optional RefundTxSignatureRequest refundTxSignatureRequest = 10;
    optional RefundTxSignatureResponse refundTxSignatureResponse = 11;
    optional StepSignature stepSignature = 12;
    optional PaymentProof paymentProof = 13;
}

service PeerService {
    rpc SendMessage(CoinffeineMessage) returns (Void);
}
